# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import country_pb2 as country__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in country_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CountryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddCountry = channel.unary_unary(
                '/country.CountryService/AddCountry',
                request_serializer=country__pb2.AddCountryRequest.SerializeToString,
                response_deserializer=country__pb2.AddCountryResponse.FromString,
                _registered_method=True)
        self.GetCountry = channel.unary_unary(
                '/country.CountryService/GetCountry',
                request_serializer=country__pb2.GetCountryRequest.SerializeToString,
                response_deserializer=country__pb2.GetCountryResponse.FromString,
                _registered_method=True)
        self.UpdateCountry = channel.unary_unary(
                '/country.CountryService/UpdateCountry',
                request_serializer=country__pb2.UpdateCountryRequest.SerializeToString,
                response_deserializer=country__pb2.UpdateCountryResponse.FromString,
                _registered_method=True)
        self.DeleteCountry = channel.unary_unary(
                '/country.CountryService/DeleteCountry',
                request_serializer=country__pb2.DeleteCountryRequest.SerializeToString,
                response_deserializer=country__pb2.DeleteCountryResponse.FromString,
                _registered_method=True)
        self.ListCountries = channel.unary_unary(
                '/country.CountryService/ListCountries',
                request_serializer=country__pb2.ListCountriesRequest.SerializeToString,
                response_deserializer=country__pb2.ListCountriesResponse.FromString,
                _registered_method=True)


class CountryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCountries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CountryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCountry,
                    request_deserializer=country__pb2.AddCountryRequest.FromString,
                    response_serializer=country__pb2.AddCountryResponse.SerializeToString,
            ),
            'GetCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCountry,
                    request_deserializer=country__pb2.GetCountryRequest.FromString,
                    response_serializer=country__pb2.GetCountryResponse.SerializeToString,
            ),
            'UpdateCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCountry,
                    request_deserializer=country__pb2.UpdateCountryRequest.FromString,
                    response_serializer=country__pb2.UpdateCountryResponse.SerializeToString,
            ),
            'DeleteCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCountry,
                    request_deserializer=country__pb2.DeleteCountryRequest.FromString,
                    response_serializer=country__pb2.DeleteCountryResponse.SerializeToString,
            ),
            'ListCountries': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCountries,
                    request_deserializer=country__pb2.ListCountriesRequest.FromString,
                    response_serializer=country__pb2.ListCountriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'country.CountryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('country.CountryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CountryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/country.CountryService/AddCountry',
            country__pb2.AddCountryRequest.SerializeToString,
            country__pb2.AddCountryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/country.CountryService/GetCountry',
            country__pb2.GetCountryRequest.SerializeToString,
            country__pb2.GetCountryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/country.CountryService/UpdateCountry',
            country__pb2.UpdateCountryRequest.SerializeToString,
            country__pb2.UpdateCountryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/country.CountryService/DeleteCountry',
            country__pb2.DeleteCountryRequest.SerializeToString,
            country__pb2.DeleteCountryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCountries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/country.CountryService/ListCountries',
            country__pb2.ListCountriesRequest.SerializeToString,
            country__pb2.ListCountriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
